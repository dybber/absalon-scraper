#!/usr/bin/env perl
use 5.012;
use warnings;
use utf8::all;

use DateTime;
use WWW::Mechanize;
use HTML::Query qw(Query);
#use Data::Dumper;
use IO::All -utf8;
use FindBin qw/$Bin/;
use File::Path qw(make_path);
use YAML::Syck qw/LoadFile DumpFile/;
use Text::CSV::Slurp qw/create load/;

use constant SITE => 'https://absalon.itslearning.com/';

################################################################################
################################### Scraping ###################################
################################################################################
sub getHTML {
    my $mech = shift;
    return $mech->response->decoded_content;
}

sub login {
    my ($mech, $username, $password) = @_;
    $mech->get(SITE);
    $mech->submit_form(
        with_fields => {
            '__EVENTTARGET' => 'ctl00$ContentPlaceHolder1$nativeLoginButton',
            'ctl00$ContentPlaceHolder1$Username$input' => $username,
            'ctl00$ContentPlaceHolder1$Password$input' => $password,
        },
    );
}

sub gotoParticipants {
    my ($mech, $courseinfo) = @_;
    $mech->get(SITE . "Course/Participants.aspx?CourseID=" . $courseinfo->{courseid});
}

sub gotoAssessmentReport {
    my ($mech, $courseinfo) = @_;
    $mech->get(SITE . "AssessmentRecord/Assignments.aspx?CourseID=" . $courseinfo->{courseid});
}

sub gotoEssay {
    my ($mech, $essayid) = @_;
    $mech->get(SITE . "essay/read_essay.aspx?EssayID=" . $essayid);
}

sub getEssayID {
    my ($res) = shift =~ /.*\?EssayID=(\d+).*/;
    return $res;
}

sub trim {
    my ($res) = shift =~ /^\s*(.*?)\s*$/;
    return $res;
}

sub getAssignmentInfo {
    my ($mech, $assignment, $handins) = @_;

    gotoEssay($mech, $assignment->{essayID});

    my @info_elements = Query( text => getHTML($mech), "ul.ccl-rwgm-row li.ccl-rwgm-column-1-3 ul li" );
    for my $li (@info_elements) {
        $_ = $li->as_trimmed_text();
        if (m/Deadline: (\d+ \w+ \d+ \d+:\d+).*/) {
            $assignment->{deadline} = $1;
        }
        elsif (m/Published: (\d+ \w+ \d+ \d+:\d+).*/) {
            $assignment->{deadline} = $1;
        }
        elsif (m/Mandatory: (Yes|No).*/) {
            $assignment->{mandatory} = $1;
        }
        elsif (m/Use groups: Learner-defined groups.*/) {
            $assignment->{groups} = "Yes";
        }
        elsif (m/Use groups: Do not use groups.*/) {
            $assignment->{groups} = "No";
        }
        elsif (m/Participants answered: (\d+).*/) {
            $assignment->{answers} = $1;
        }
        elsif (m/Max. score: (\d+).*/) {
            $assignment->{maxScore} = $1;
        }
    }

    $assignment->{maxScore}  = "" unless $assignment->{maxScore};
    $assignment->{deadline}  = "" unless $assignment->{deadline};
    $assignment->{mandatory} = "" unless $assignment->{mandatory};
    $assignment->{groups}    = "" unless $assignment->{groups};
    $assignment->{answers}   = "" unless $assignment->{answers};

    say "  Getting handins for: " . $assignment->{title};
    getHandins($mech, $assignment, $handins);
}

sub getAssignments {
    my ($mech, $courseinfo, $assignments, $handins) = @_;

    gotoAssessmentReport($mech, $courseinfo);

    my $q = Query( text => getHTML($mech) );
    my @header = ($q->query('tr th')->get_elements);

    for my $head (@header) {
        next unless (($head->attr('class') // '') eq 'grade-book-item-header');

        my $assignment = {};

        my $hd = Query($head);
        my $link = $hd->query('a');
        my $title = trim(($hd->query('a')->get_elements)[0]->as_text);

        my $url = $link->attr('href');

        $assignment->{title} = $title;
        $assignment->{essayID} = getEssayID(@$url[0]);

        getAssignmentInfo($mech, $assignment, $handins);

        push(@$assignments, $assignment);
    }
}

sub parsePersons {
    my ($mech, $courseinfo, $persons) = @_;

    my $q = Query( text => getHTML($mech) );
    my @header = map { $_->as_text } ($q->query('thead tr th')->get_elements);
    my ($classIdx)     = grep { $header[$_] =~ /Group/ }      (0 .. $#header);
    my ($nameIdx)      = grep { $header[$_] =~ /Name/ }       (0 .. $#header);
    my ($roleIdx)      = grep { $header[$_] =~ /Role/ }       (0 .. $#header);
    my ($lastVisitIdx) = grep { $header[$_] =~ /Last visit/ } (0 .. $#header);
    my ($usernameIdx)  = grep { $header[$_] =~ /Username/ }   (0 .. $#header);

    my @rows = ($q->query('tr')->get_elements);
    for my $tr (@rows) {
        my $sq = Query($tr);
        my @row = map { $_->as_text } ($sq->query('td')->get_elements);

        next unless $row[$usernameIdx];

        my ($class) = ($row[$classIdx] // '') =~ qr/$courseinfo->{exerciseClassRegex}/;
        
        if (!$class) {
            $class = "";
        }

        my $person = {class => $class,
                      name  => $row[$nameIdx],
                      username => $row[$usernameIdx],
                      lastVisit => $row[$lastVisitIdx],
                      role => $row[$roleIdx]
                     };

        push(@$persons, $person);
    }
}

sub getNextPersonPage {
    my $mech = shift;

    return 0 unless my $link = $mech->find_link( text_regex => qr/»/ );
    my ($page) = $link->attrs->{onclick} =~ /goToPage\((\d+)\)/;
    $mech->form_id('aspnetForm');
    $mech->set_fields('ctl00$ContentPlaceHolder$ParticipantsGrid$HPN' => $page);
    $mech->submit_form();

    return 1;
}

sub getParticipants {
    my ($mech, $courseinfo, $students) = @_;
    gotoParticipants($mech, $courseinfo);
    do {
        parsePersons($mech, $courseinfo, $students);
    } while (getNextPersonPage($mech));
}

sub parseHandins {
    my ($mech, $assignment, $handins) = @_;

    my $q = Query( text => getHTML($mech) );
    my @header = map { $_->as_text } ($q->query('div.tablelisting table tr th')->get_elements);

    my ($nameIdx)           = grep { $header[$_] =~ /Name/ }      (0 .. $#header);
    my ($usernamesIdx)      = grep { $header[$_] =~ /Username/ }  (0 .. $#header);
    my ($submissionTimeIdx) = grep { $header[$_] =~ /Submitted/ } (0 .. $#header);
    my ($reviewDateIdx)     = grep { $header[$_] =~ /Review/ }    (0 .. $#header);
    my ($statusIdx)         = grep { $header[$_] =~ /Status/ }    (0 .. $#header);
    my ($scoreIdx)          = grep { $header[$_] =~ /Score/ }     (0 .. $#header);
    my ($assessmentIdx)     = grep { $header[$_] =~ /Assessment/ }(0 .. $#header);

    my @rows = ($q->query('div.tablelisting table tr')->get_elements);
    for my $tr (@rows) {
        my $sq = Query($tr);
        my @row = $sq->query('td')->get_elements;
        next unless @row;

        my @rowtext = map { $_->as_text } @row;

        my $score;
        if ($scoreIdx) {
            $score = trim($rowtext[$scoreIdx]);
        } else {
            $score = "";
        }

        my $assessment = "";
        if ($assessmentIdx) {
            $assessment = trim($rowtext[$assessmentIdx]);
            if ($assessment =~ m/.*\((.*?)\).*/) {
                $assessment = $1;
            }
        }

        # Usernames and names are extracted by splitting on <br /> tags.
        my @usernames = grep(length, split ( /<.*?>/, $row[$usernamesIdx]->as_HTML));
        #my @names = grep(length, split ( /<.*?>/, $row[$nameIdx]->as_HTML));

        my $sorted_users = join (":", sort { lc($a) cmp lc($b) } @usernames);

        my $status;
        if ($rowtext[$statusIdx] =~ m/.*\((.*?)\).*/) {
            $status = $1;
        } else {
            $status = $rowtext[$statusIdx];
        }

        my $handin = {
            assignment => $assignment->{title},
            essayID => $assignment->{essayID},
            group => $sorted_users,
            submissionTime => $rowtext[$submissionTimeIdx],
            reviewDate => $rowtext[$reviewDateIdx],
            status => $status,
            score => $score,
            assessment => $assessment
        };

        push(@$handins, $handin);
    }

    return 1;
}

sub gotoNextPageOfHandins {
    my $mech = shift;
    
    return 0 unless my $link = $mech->find_link( text_regex => qr/»/ );
    my $next = $link->attrs->{id};
    $next =~ s/_/\$/g;

    $mech->form_id('ctl03');
    $mech->set_fields('__EVENTTARGET' => $next);
    $mech->submit_form();
    return 1;
}

sub getHandins {
    my ($mech, $assignment, $handins) = @_;
    do {
        parseHandins($mech, $assignment, $handins);
    } while (gotoNextPageOfHandins($mech))
}

sub scrapeCourse {
    my ($mech, $courseinfo, $dir,
        $participants, $assignments, $handins) = @_;

    my $heading = $courseinfo->{title} . " (" . $courseinfo->{edition} . " edition)";
    say ($heading =~ s/./\-/gr);
    say $heading;
    say ($heading =~ s/./\-/gr);

    say "Reading list of participants.";

    getParticipants($mech, $courseinfo, $participants);

    say "Reading list of assignments.";
    getAssignments($mech, $courseinfo, $assignments, $handins);
}

################################################################################
############################ Pretty printing to CSV ############################
################################################################################
sub save {
    my ($data, $filename, $pprinter) = @_;
    open(my $fh, '>', $filename);
    select($fh);
    $pprinter->($data);
    close($fh);
    select STDOUT;
}

sub printParticipants {
    my ($participants) = @_;
    print Text::CSV::Slurp->create( 
        input => $participants,
        field_order => ["name", "username", "class", "role"]);
}

sub printLastVisits {
    my ($participants) = @_;
    print Text::CSV::Slurp->create( 
        input => $participants,
        field_order => ["username", "lastVisit"]);
}

sub printAssignments {
    my ($assignments) = @_;
    print Text::CSV::Slurp->create( 
        input => $assignments,
        field_order => ["title", "essayID", "deadline",
                        "answers", "maxScore", "mandatory", "groups"]);
}

sub printHandins {
    my ($handins) = @_;

    # Make one row for each user, instead of each group
    my @flattened;
    for my $handin ( @$handins ) {
        my @users = split(':', $handin->{group});
        for my $user ( @users ) {
            my $copy = { %$handin };
            $copy->{username} = $user;
            push(@flattened, $copy);
        }
    }

    print Text::CSV::Slurp->create( 
        input => \@flattened,
        field_order => ["assignment", "essayID", "username", "group", 
                        "score","assessment","status", "submissionTime",
                        "reviewDate"]);
}

################################################################################
############################# Update existing data #############################
################################################################################
sub updateBy {
    my ($f, $old, $new) = @_;
 
    my %seen;
    for my $e (@$old) {
        my $key = $f->($e);
        $seen{$key} = 1;
    }

    for my $e (@$new) {
        my $key = $f->($e);
        if (!$seen{$key}) {
            $seen{$key} = 1;
            push(@$old, $e);
        }
    }
}

sub getUsername {
    my ($user) = @_;
    return $user->{username};
}

sub getUsernameAndVisit {
    my ($user) = @_;
    return $user->{username} . $user->{lastVisit};
}

sub timestampNow {
    my $now = DateTime->now( time_zone => 'local' );
    return $now->strftime("%Y%m%d-%H%M");
}

sub updateCourse {
    my ($mech, $courseinfo, $dir) = @_;

    # Filenames
    my $participantsFile = $dir . "/participants.csv";
    my $visitsFile = $dir . "/visits.csv";
    my $assignmentsFile = $dir . "/assignments.csv";
    my $handinsFile = $dir . "/handins-" . timestampNow() . ".csv";

    # Get new info
    my @participants;
    my @assignments;
    my @handins;
    scrapeCourse($mech, $courseinfo, $dir,
                 \@participants, \@assignments, \@handins);

    my @visits;
    for my $person (@participants) {
        my $v = {username => $person->{username},
                 lastVisit => $person->{lastVisit}};
        push(@visits, $v);
    }

    my $oldparticipants = [];
    if (-e $participantsFile) {
        $oldparticipants = Text::CSV::Slurp->load(file => $participantsFile);
    }

    my $oldvisits = [];
    if (-e $visitsFile) {
        $oldvisits = Text::CSV::Slurp->load(file => $visitsFile);
    }

    ## Add new visits, but keep all the old ones
    updateBy(\&getUsernameAndVisit, $oldvisits, \@visits);

    ## Add the old participants which might have been removed
    updateBy(\&getUsername, \@participants, $oldparticipants);

    # Save everything
    if (!-d $dir) {
        make_path $dir or die "Failed to create directory: " . $dir;
    }

    DumpFile($dir . "/config.yaml", $courseinfo);

    if (scalar @participants == 0) {
        say "No participants. This is probably an error in absalon-scraper."
    } else {
        save(\@participants,   $participantsFile, \&printParticipants);
        save($oldvisits,       $visitsFile,       \&printLastVisits);
    }

    if (scalar @assignments == 0) {
        say "No assignments."
    } else {
        save(\@assignments,    $assignmentsFile,  \&printAssignments);
    }

    if (scalar @handins == 0) {
        say "No handins."
    } else {
        save(\@handins,        $handinsFile,      \&printHandins);

        # Symlink handins.csv to new timestamped handins-file
        unlink("handins.csv");
        symlink ($handinsFile, "handins.csv");
    }
}


################################################################################
############################ Command line interface ############################
################################################################################
sub interactiveConfig {
    print "Enter course title: ";
    my $title=<STDIN>;
    print "Enter course abbreviation: ";
    my $abbreviation=<STDIN>;
    print "Enter study year (20092010 for the year starting Sept. 2009): ";
    my $year=<STDIN>;
    print "Enter bloc (B1,B2,B3,B4,B5) or semester (Fall, Spring): ";
    my $bloc=<STDIN>;
    print "Enter CourseID from Absalon (look at the URL of your course): ";
    my $courseid=<STDIN>;
    print "Enter regex matching exercise class names (Hold (\\d+)): ";
    my $regex=<STDIN>;

    chomp $title;
    chomp $courseid;
    chomp $abbreviation;
    chomp $year;
    chomp $bloc;
    chomp $regex;

    return (
        title              => $title,
        courseid           => $courseid,
        edition            => $year . "-" . $bloc,
        abbreviation       => $abbreviation,
        exerciseClassRegex => $regex
    );
}

sub displayHelp {
    say "usage $0 <command> [<args>]";
    say "";
    say "Commands:";
    say "\tnew   \t Create course configuration (interactive)";
    say "\tupdate\t Fetches a course or updates existing";
    say "\thelp  \t Display this help message";
}

sub main {
    if (scalar @ARGV < 1) {
        displayHelp();
        exit(1);
    }
    my $command = $ARGV[0];

    if ($command eq "new") {
        my %courseinfo = interactiveConfig();
        
        my $dir = $courseinfo{edition} . "-" . $courseinfo{abbreviation};
        if (-d $dir) {
            say "Directory (./$dir) already exists. Exiting.";
            exit(1);
        } 
        else {
            make_path $dir or die "Failed to create directory: " . $dir;
        }

        DumpFile("./$dir/config.yaml", \%courseinfo);
    }
    elsif ($command eq "update") {
        my @courses = LoadFile("./config.yaml");
        if (scalar @courses == 0) {
            say "No courses in config.yaml";
            exit(1);
        }
        elsif (scalar @courses > 1) {
            say "More than one configuration object in config.yaml - I don't know what to do!";
            exit(1);
        }

        my ($username, $password) = io("$Bin/.absalon_credentials")->slurp =~ /^([^:]+):(.*)$/;
        unless ($username) {
            say "Place a file named '.absalon_credentials' in the folder you run the program from.";
            say "In it, put username:password for absalon.itslearning.com login.";
            exit(-1);
        }
        chomp $username;
        chomp $password;

        my $mech = WWW::Mechanize->new();
        $mech->agent_alias('Windows Mozilla');
        login($mech, $username, $password);

        updateCourse($mech, $courses[0], ".");
        say "Saved to current working directory.";
    } else {
        displayHelp();
    }
}

local $| = 1;
main ();
